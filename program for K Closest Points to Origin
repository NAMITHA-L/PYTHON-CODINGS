def squaredDis(point):
    return point[0] * point[0] + point[1] * point[1]

def partition(points, left, right):
    
    pivot = points[right]
    i = left

    for j in range(left, right):
      
        if squaredDis(points[j]) <= squaredDis(pivot):
            points[i], points[j] = points[j], points[i]
            i += 1
    
    points[i], points[right] = points[right], points[i]
    
    return i

def quickSelect(points, left, right, k):
    if left <= right:
        pivotIdx = partition(points, left, right)
        
        leftCnt = pivotIdx - left + 1
      
        if leftCnt == k:
            return
        
        if leftCnt > k:
            quickSelect(points, left, pivotIdx - 1, k)
            
        else:
            quickSelect(points, pivotIdx + 1, right, k - leftCnt)

def kClosest(points, k):
    
    quickSelect(points, 0, len(points) - 1, k)
    
    return points[:k]
